<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        I8P+AAfj//AH///wB///+A////4///////8=
</value>
  </data>
</root>